"""
Generates answers considering PDF (argv[1]) for each prompt listed in prompts file (argv[2])

Usage: 
python pdfInterrogator.py <pdf_name> <prompts_file_name>
"""

from openai import OpenAI
import time
import sys

if len(sys.argv) != 3: 
    print("Usage: python pdfInterrogator.py <pdf_filename> <prompts_filename>")
    sys.exit(1)

# Create temporary assistant
client = OpenAI()
assistant = client.beta.assistants.create(
  name="Biomedical PDF Reader",
  instructions="Use the uploaded file to provide answer. If you can't find a text match within excerpts, use the location specified in parentheses after them. If asked to put something in the form of a Beamer presentation, use the \\begin{frame} and \\end{frame} commands to begin and end slides, and the \\frametitle{} command to title the slide",
  tools=[{"type": "file_search"}],
  model="gpt-4o",
)

# Arg 1: Filename of PDF to be analyzed (can be just the name if it's in script directory, otherwise can use absolute file directory)
pdf_filename = sys.argv[1]
    # e.g. "love.pdf"
# Arg 2: Filename of prompts as generated by highlighted PDF
prompts_filename = sys.argv[2]
    # e.g. "text_prompts.txt"

# Initialize PDF within client
message_file = client.files.create(
  file=open(pdf_filename, "rb"), purpose="assistants"
)

# Create thread
thread = client.beta.threads.create(
  messages=[
    {
      "role": "user",
      "content": "Summarize the content of the biomedical PDF with the guidance of the following prompts;",
      "attachments": [
        { "file_id": message_file.id, "tools": [{"type": "file_search"}] }
      ],
    }
  ]
)

# Take promps from input
with open(prompts_filename, "r") as file:
  content = file.read().strip()
prompts = content.split("\n\n")
answers = []

# Add to answers based on prompt
for prompt in prompts: 
  current_run = client.beta.threads.runs.create_and_poll(
  thread_id=thread.id, assistant_id=assistant.id, instructions=prompt
  )
  messages = list(client.beta.threads.messages.list(thread_id=thread.id, run_id=current_run.id))
  if messages: 
    message_content = str(messages[0].content[0].text)
    answers.append(message_content)


with open("text_answers.tex", "w") as file:
  file.write("\n------------\n".join(answers))


# (Delete assistant to reduce account clutter)
deletion_response = client.beta.assistants.delete(assistant.id)
